<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password - RedefineLab</title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700;900&display=swap" rel="stylesheet">
</head>
<body class="dark-home">
    <div id="global-header"></div>
    <main>
        <!-- Reset Password Hero Section -->
        <section class="login-hero-section">
            <div class="login-hero-overlay"></div>
            <div class="login-container">
                <div class="login-content">
                    <div class="login-header">
                        <h1>Create New Password</h1>
                        <p class="login-desc">Enter your new password below</p>
                    </div>
                    
                    <div class="login-form-container">
                        <form class="login-form" id="resetPasswordForm">
                            <div class="form-header">
                                <h3>Reset Password</h3>
                                <p>Choose a strong password</p>
                            </div>
                            
                            <div class="form-group">
                                <label for="password">New Password</label>
                                <div class="password-input-container">
                                    <input 
                                        type="password" 
                                        id="password" 
                                        name="password" 
                                        required
                                        minlength="6"
                                        placeholder="Enter new password"
                                    >
                                    <button type="button" class="password-toggle" id="passwordToggle">
                                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                                            <circle cx="12" cy="12" r="3"/>
                                        </svg>
                                    </button>
                                </div>
                                <div class="validation-feedback" id="password-feedback"></div>
                            </div>
                            
                            <div class="form-group">
                                <label for="confirmPassword">Confirm New Password</label>
                                <div class="password-input-container">
                                    <input 
                                        type="password" 
                                        id="confirmPassword" 
                                        name="confirmPassword" 
                                        required
                                        minlength="6"
                                        placeholder="Confirm new password"
                                    >
                                    <button type="button" class="password-toggle" id="confirmPasswordToggle">
                                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                                            <circle cx="12" cy="12" r="3"/>
                                        </svg>
                                    </button>
                                </div>
                                <div class="validation-feedback" id="confirmPassword-feedback"></div>
                            </div>
                            
                            <div class="form-actions">
                                <button type="submit" class="login-submit-btn">
                                    <span class="btn-text">Update Password</span>
                                    <div class="spinner" style="display: none;"></div>
                                </button>
                            </div>
                        </form>
                        
                        <div class="login-footer">
                            <p>Remember your password? <a href="/login" class="signup-link">Sign In</a></p>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Notification -->
        <div class="notification" id="notification" style="display: none;">
            <div class="notification-content">
                <span class="notification-message"></span>
                <button class="notification-close">&times;</button>
            </div>
        </div>
    </main>

    <script src="/js/script.js"></script>
    <script>
        // Password toggle functionality
        function setupPasswordToggle(toggleId, inputId) {
            const toggle = document.getElementById(toggleId);
            const input = document.getElementById(inputId);
            
            if (toggle && input) {
                toggle.addEventListener('click', () => {
                    const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                    input.setAttribute('type', type);
                    
                    // Update icon
                    const svg = toggle.querySelector('svg');
                    if (type === 'text') {
                        svg.innerHTML = '<path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line>';
                    } else {
                        svg.innerHTML = '<path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle>';
                    }
                });
            }
        }

        // Setup password toggles
        setupPasswordToggle('passwordToggle', 'password');
        setupPasswordToggle('confirmPasswordToggle', 'confirmPassword');

        // Notification system
        function showNotification(message, type = 'info') {
            const notification = document.getElementById('notification');
            const messageEl = notification.querySelector('.notification-message');
            
            messageEl.textContent = message;
            notification.className = `notification ${type}`;
            notification.style.display = 'block';
            
            setTimeout(() => {
                notification.style.display = 'none';
            }, 5000);
        }

        // Close notification
        document.querySelector('.notification-close').addEventListener('click', () => {
            document.getElementById('notification').style.display = 'none';
        });

        // Get token from URL
        const urlParams = new URLSearchParams(window.location.search);
        const resetToken = urlParams.get('token');

        if (!resetToken) {
            showNotification('Invalid or missing reset token. Please request a new password reset.', 'error');
            setTimeout(() => {
                window.location.href = '/forgot-password';
            }, 3000);
        }

        // Form validation and submission
        const resetPasswordForm = document.getElementById('resetPasswordForm');

        resetPasswordForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            // Validate passwords match
            if (password !== confirmPassword) {
                showNotification('Passwords do not match', 'error');
                return;
            }
            
            if (password.length < 6) {
                showNotification('Password must be at least 6 characters long', 'error');
                return;
            }
            
            await submitPasswordReset({
                password: password,
                token: resetToken
            });
        });

        async function submitPasswordReset(data) {
            const submitBtn = document.querySelector('.login-submit-btn');
            const btnText = submitBtn.querySelector('.btn-text');
            const spinner = submitBtn.querySelector('.spinner');
            
            try {
                // Show loading state
                btnText.style.display = 'none';
                spinner.style.display = 'inline-block';
                submitBtn.disabled = true;
                
                await sendPasswordResetRequest(data);
                
                showNotification('Password updated successfully! Redirecting to login...', 'success');
                
                // Redirect to login page after success
                setTimeout(() => {
                    window.location.href = '/login';
                }, 2000);
                
            } catch (error) {
                console.error('Password reset error:', error);
                showNotification(error.message || 'Failed to update password. Please try again.', 'error');
            } finally {
                // Hide loading state
                btnText.style.display = 'inline';
                spinner.style.display = 'none';
                submitBtn.disabled = false;
            }
        }
        
        async function sendPasswordResetRequest(data) {
            try {
                // Determine the correct API URL
                const apiUrl = window.location.protocol === 'file:' 
                    ? 'http://localhost:3000/api/auth/reset-password'
                    : '/api/auth/reset-password';
                
                console.log('Sending password reset request');
                
                // Make API call to reset password endpoint
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                console.log('Password reset response:', result);
                
                if (result.success) {
                    return result;
                } else {
                    throw new Error(result.message || 'Failed to update password');
                }
                
            } catch (error) {
                console.error('Password reset API error:', error);
                throw new Error(error.message || 'Failed to update password. Please try again.');
            }
        }
    </script>
</body>
</html>